#------------------------------- version 30/11/22 -------------------------------#


# snakemake -j1 -F -p ./database/*fna --use-conda
touchfile = '.downloaded_genomes'


configfile: "config.yaml"
print("Config is: ", config)

DATABASE = config["database"]
print(DATABASE)

GENOMES = glob_wildcards("database/{genome}.fna").genome


rule create_genome_list:
    output: touch(touchfile),
            "temp_list.txt"

    conda:  "entrez_env.yaml"
    message: "Creating the genomes list..."
    
    shell:
        r"""
        esearch -db assembly -query '{DATABASE}' \
        | esummary \
        | xtract -pattern DocumentSummary -element FtpPath_GenBank \
        | while read -r line ; 
        do
            fname=$(echo $line | grep -o 'GCA_.*' | sed 's/$/_genomic.fna.gz/') ;
            echo "$line/$fname" > temp/$fname.temp;
        done

        ls /temp/*.temp > {output[1]}
       
        """   

rule download_genome:
    output: directory("database/{GENOME}.fna.gz")
    input:  "temp/{GENOME}.fna.gz.temp"

    message: "Downloading genomes..."
    
    shell:
        r"""
        GENOME_LINK=$(cat {input})

        GENOME="${GENOME_LINK##*/}"

        wget -P ./database $GENOME_LINK 
        """

rule unzip_genome:
    output: "{database}/{GENOME}.fna",
            "{database}/list_of_downloaded_genomes.txt"

    input:  "{database}/{GENOME}.fna.gz"

    message: "Unzipping genomes..."
    
    shell:
        r"""
        gunzip {input}

        ls {input} > {output[1]}

        """        


#rule make_list_downloaded_genomes:
#    output: 
#    input:  "database/{GENOME}.fna"
#
#    shell:
#        r"""
#        ls {input} > {output}
#        """        




#--------------------------------------------------------------------------------#

#take the last string part after \
#
#    VAR=$(echo ${line##*/}.txt)



#rule download_genome:
#    input:  "./temp/{LOCAL}.txt"
#    output: "./database/{GENOME}"
#    #resources: load=50 # then execute snakemake with "snakemake --resources load=100" #to restrict the internet usage






rule create_genome_list:
    output: "list_of_genomes.txt"
    conda:  "entrez_env.yaml"
    message: "Creating the genomes list..."
    
    shell:
        r"""
        esearch -db assembly -query '{DATABASE}' \
        | esummary \
        | xtract -pattern DocumentSummary -element FtpPath_GenBank \
        | while read -r line ; 
        do
            fname=$(echo $line | grep -o 'GCA_.*' | sed 's/$/_genomic.fna.gz/') ;
            echo "$line/$fname" >> list_of_genomes.txt;
        done
       
        """  






















#rule downoload_genome:
#    input:  "{GENOME}"
#    output: "database/{GENOME}.fna.gz"
#
#    shell:
#        r"""
#
#        """
#
#
#rule unzip_genome:
#    input:  "database/{GENOME}.fna.gz"
#    output: "database/{GENOME}.fna"
#
#    shell:
#        r"""
#        
#        """
#
#
#rule collect_files:
#    input:  "database/{GENOME}.fna"
#    output: "list.txt"
#
#    shell:
#        r"""
#        ls database/*fna > list.txt
#        """        



#rule downloading_genomes:
##    input:  config["database"]
#    output: "database/list_of_genomes.txt"
#    conda:  "entrez_env.yaml"
#    
#    shell:
#        r"""
#
#        esearch -db assembly -query '{DATABASE}' \
#        | esummary \
#        | xtract -pattern DocumentSummary -element FtpPath_GenBank \
#        | while read -r line ; 
#        do
#            fname=$(echo $line | grep -o 'GCA_.*' | sed 's/$/_genomic.fna.gz/') ;
#            wget -P ./database "$line/$fname" ;
#        done
#
#
#        ls database/*gz > list_of_genomes.txt
#
#        """   







#esearch -db assembly -query '{DATABASE}' \
#        | esummary \
#        | xtract -pattern DocumentSummary -element FtpPath_GenBank \
#        | while read -r line ; 
#        do
#            fname=$(echo $line | grep -o 'GCA_.*' | sed 's/$/_genomic.fna.gz/') ;
#            wget -P ./database "$line/$fname" ;
#        done












#rule unzip_genome:
#    input: "database/*.fna.gz"
#    output: "database/*.fna"b
#    shell:
#        r"""
#        guzip {input}
#        """
